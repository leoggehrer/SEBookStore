//@GeneratedCode
namespace SEBookStore.WebApi.Controllers
{
    using TModel = SEBookStore.WebApi.Models.Book;
    using TEntity = SEBookStore.Logic.Entities.Book;
    using TContract = SEBookStore.Common.Contracts.IBook;
    /// <summary>
    /// Generated by the generator.
    /// </summary>
    public sealed partial class BooksController(Contracts.IContextAccessor contextAccessor) : Controllers.GenericController<TModel, TEntity, TContract>(contextAccessor)
    {
        /// <summary>
        /// Initializes the class (created by the generator).
        /// </summary>
        static BooksController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// This method is called before the construction of the class.
        /// </summary>
        static partial void ClassConstructing();
        /// <summary>
        /// This method is called when the class is constructed.
        /// </summary>
        static partial void ClassConstructed();

        /// <summary>
        /// Generated by the generator.
        /// </summary>
        protected override TModel ToModel(TEntity entity)
        {
            var handled = false;
            var result = new TModel();
            BeforeToModel(entity, ref result, ref handled);
            if (handled == false)
            {
                (result as TContract).CopyProperties(entity);
            }
            AfterToModel(result);
            return result;
        }
        partial void BeforeToModel(TEntity entity, ref TModel outModel, ref bool handled);
        partial void AfterToModel(TModel model);
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        protected override TEntity ToEntity(TModel model, TEntity? entity)
        {
            var handled = false;
            var result = entity ?? new TEntity();
            BeforeToEntity(model, ref result, ref handled);
            if (handled == false)
            {
                (result as TContract).CopyProperties(model);
            }
            AfterToEntity(result);
            return result;
        }
        partial void BeforeToEntity(TModel model, ref TEntity outEntity, ref bool handled);
        partial void AfterToEntity(TEntity entity);
    }
}
